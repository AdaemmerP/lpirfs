# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 24                       # Set the horizon length for irfs
################################################################################
data("monetary_var_data")
data_set_df <- monetary_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
?lp_lin
library(lpirfs)
specs <- list()
# - Sample and lags
specs$lags_lin       <- 12                        # Set the number of lags for the linear model
specs$lags_criterion <- NaN                      # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 24                       # Set the horizon length for irfs
################################################################################
data("monetary_var_data")
data_set_df <- monetary_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
is.nan(specs$lags_criterion)
specs$shock_type
library(lpirfs)
specs <- list()
# - Sample and lags
specs$lags_lin       <- 12                        # Set the number of lags for the linear model
specs$lags_criterion <- NaN                      # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 24                       # Set the horizon length for irfs
################################################################################
data("monetary_var_data")
data_set_df <- monetary_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
results_lin <- lpirfs::plot_lin_irfs(results_lin)
lin_plots   <- sapply(results_lin, ggplotGrob)
marrangeGrob(lin_plots, nrow = ncol(data_set_df), ncol = ncol(data_set_df))
library(lpirfs)
# --- Define variables for estimation
specs <- list()
# - Sample and lags
specs$lags_lin       <- 12                        # Set the number of lags for the linear model
specs$lags_criterion <- 'AIC'                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 24                       # Set the horizon length for irfs
################################################################################
data("monetary_var_data")
data_set_df <- monetary_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
results_lin <- lpirfs::plot_lin_irfs(results_lin)
lin_plots   <- sapply(results_lin, ggplotGrob)
marrangeGrob(lin_plots, nrow = ncol(data_set_df), ncol = ncol(data_set_df))
specs$lags_criterion
specs <- list()
# - Sample and lags
specs$lags_lin       <- 12                        # Set the number of lags for the linear model
specs$lags_criterion <- 'AIC'                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 24                       # Set the horizon length for irfs
################################################################################
data("monetary_var_data")
data_set_df <- monetary_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
results_lin <- lpirfs::plot_lin_irfs(results_lin)
lin_plots   <- sapply(results_lin, ggplotGrob)
marrangeGrob(lin_plots, nrow = ncol(data_set_df), ncol = ncol(data_set_df))
View(results_lin)
specs <- list()
# - Sample and lags
specs$lags_lin       <- 12                        # Set the number of lags for the linear model
specs$lags_criterion <- NaN                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 24                       # Set the horizon length for irfs
################################################################################
data("monetary_var_data")
data_set_df <- monetary_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
specs$starts         <- 1                        # Sample Start
specs$ends           <- dim(data_set_df)[1]      # Sample end
specs$columns        <- names(data_set_df)       # Name endogenous variables
specs$endog          <- ncol(data_set_df)        # Set the number of endogenous variables
data_lin <- create_lin_data(specs, data_set_df)
y_lin    <- data_lin[[1]]
x_lin    <- data_lin[[2]]
# Construct shock matrix
d <- reduced_var(y_lin, x_lin, data_set_df, specs)
# Matrices to store OLS parameters
b1            <- matrix(NaN, specs$endog, specs$endog)
b1_low        <- matrix(NaN, specs$endog, specs$endog)
b1_up         <- matrix(NaN, specs$endog, specs$endog)
# Matrices to store irfs for each horizon
irf_mean  <-  matrix(NaN, specs$endog, specs$hor + 1)
irf_low   <-  irf_mean
irf_up    <-  irf_mean
# 3D Arrays for all irfs
irf_lin_mean  <-  array(NaN, dim = c(specs$endog, specs$hor + 1, specs$endog))
irf_lin_low   <-  irf_lin_mean
irf_lin_up    <-  irf_lin_mean
numb_cores     <- min(specs$endog, parallel::detectCores() - 1)
cl             <- makeCluster(numb_cores)
doSNOW::registerDoSNOW(cl)
# Decide whether lag lengths are given or have to be estimated
if(is.nan(specs$lags_criterion) == TRUE){
# Loops to estimate local projections
lin_irfs <- foreach(s         = 1:specs$endog,
.packages = 'lpirfs')  %dopar%{ # Accounts for the shocks
for (h in 1:(specs$hor)){   # Accounts for the horizons
I
# Create data
yy  <-   y_lin[h : dim(y_lin)[1], ]
xx  <-   x_lin[1 : (dim(x_lin)[1] - h + 1), ]
for (k in 1:specs$endog){ # Accounts for the reactions of the endogenous variables
# Estimate coefficients and newey west std.err
nw_results     <- lpirfs::newey_west_c(yy[, k], xx, h)
b              <- nw_results[[1]]
std_err        <- sqrt(diag(nw_results[[2]]))*specs$confint
# Fill coefficient matrix
b1[k, ]        <-   b[2:(specs$endog + 1)]
b1_low[k, ]    <-   b[2:(specs$endog + 1)] - std_err[2:(specs$endog + 1)]
b1_up[k, ]     <-   b[2:(specs$endog + 1)] + std_err[2:(specs$endog + 1)]
}
# Fill matrices with local projections
irf_mean[, h + 1] <- t(b1     %*% d[ , s])
irf_low[,  h + 1] <- t(b1_low %*% d[ , s])
irf_up[,   h + 1] <- t(b1_up  %*% d[ , s])
}
# Return irfs
return(list(irf_mean,  irf_low,  irf_up))
}
# Fill arrays with irfs
for(i in 1:specs$endog){
# Fill irfs
irf_lin_mean[, , i]   <- as.matrix(do.call(rbind, lin_irfs[[i]][1]))
irf_lin_low[, ,  i]   <- as.matrix(do.call(rbind, lin_irfs[[i]][2]))
irf_lin_up[, ,   i]   <- as.matrix(do.call(rbind, lin_irfs[[i]][3]))
# First value of is merely the shock
irf_lin_mean[, 1, i]   <- t(d[, i])
irf_lin_low[,  1, i]   <- irf_lin_mean[, 1, i]
irf_lin_up[,   1, i]   <- irf_lin_mean[, 1, i]
}
################################################################################
} else {
################################################################################
# Convert chosen lag criterion to number for loop
lag_crit     <- switch(specs$lags_criterion,
'AICc'= 1,
'AIC' = 2,
'BIC' = 3)
# Loops to estimate local projections.
lin_irfs <- foreach(s          = 1:specs$endog,
.packages   = 'lpirfs')  %dopar% {
for (h in 1:specs$hor){     # Accounts for the horizon
for (k in 1:specs$endog){ # Accounts for endogenous reactions
# Find optimal lags
val_criterion <- lpirfs::find_lag_c(y_lin, x_lin, lag_crit, h, k,
specs$max_lags)
# Set optimal lag length
lag_choice  <- which.min(val_criterion)
# Extract matrices based on optimal lag length
yy <- y_lin[[lag_choice]][, k]
yy <- yy[h: length(yy)]
xx <- x_lin[[lag_choice]]
xx <- xx[1:(dim(xx)[1] - h + 1),]
# Estimate coefficients and newey west std.err
nw_results   <- lpirfs::newey_west_c(yy, xx, h)
b            <- nw_results[[1]]
std_err      <- sqrt(diag(nw_results[[2]]))*specs$confint
# Fill coefficient matrix
b1[k, ]      <-   b[2:(specs$endog + 1)]
b1_low[k, ]  <-   b[2:(specs$endog + 1)] - std_err[2:(specs$endog + 1)]
b1_up[k, ]   <-   b[2:(specs$endog + 1)] + std_err[2:(specs$endog + 1)]
}
# Fill matrices with local projections
irf_mean[, h + 1] <- t(b1     %*% d[ , s])
irf_low[,  h + 1] <- t(b1_low %*% d[ , s])
irf_up[,   h + 1] <- t(b1_up  %*% d[ , s])
}
list(irf_mean,  irf_low,  irf_up)
}
# Fill arrays with irfs
for(i in 1:specs$endog){
# Fill irfs
irf_lin_mean[, , i] <- as.matrix(do.call(rbind, lin_irfs[[i]][1]))
irf_lin_low[, ,  i] <- as.matrix(do.call(rbind, lin_irfs[[i]][2]))
irf_lin_up[, ,   i] <- as.matrix(do.call(rbind, lin_irfs[[i]][3]))
# First value of horizon is merely the shock
irf_lin_mean[, 1, i]   <- t(d[, i])
irf_lin_low[,  1, i]   <- irf_lin_mean[, 1, i]
irf_lin_up[,   1, i]   <- irf_lin_mean[, 1, i]
}
###################################################################################################
}
# Close cluster
stopCluster(cl)
specs$lags_criterion
is.nan(specs$lags_criterion)
################################################################################
data("interest_rules_var_data")
################################################################################
data("interest_rules_var_data")
################################################################################
data("interest_rules_var_data.RData")
load("~/Dropbox/HSU/Projekte/NL_VAR/lpirfs/data/interest_rules_var_data.RData")
specs <- list()
# - Sample and lags
specs$lags_lin       <- 12                        # Set the number of lags for the linear model
specs$lags_criterion <- NaN                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 12                     # Set the horizon length for irfs
################################################################################
data("interest_rules_var_data.RData")
data_set_df <-interest_rules_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
results_lin <- lpirfs::plot_lin_irfs(results_lin)
lin_plots   <- sapply(results_lin, ggplotGrob)
marrangeGrob(lin_plots, nrow = ncol(data_set_df), ncol = ncol(data_set_df))
rm(results_lin)
data_set_df <-interest_rules_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
# Estimate coefficients and newey west std.err
# nw_results     <- lpirfs::newey_west_c(yy[, k], xx, h)
# b              <- nw_results[[1]]
# std_err        <- sqrt(diag(nw_results[[2]]))*specs$confint
#
# results_lm     <- lm(yy[, k] ~ xx)
# results_lm$coefficients
# std_err_sandwich  <- sqrt(diag(sandwich::NeweyWest(results_lm, lag = 1, prewhite = TRUE)))
plots_lin <- lpirfs::plot_lin_irfs(results_lin)
lin_plots   <- sapply(plots_lin, ggplotGrob)
marrangeGrob(lin_plots, nrow = ncol(data_set_df), ncol = ncol(data_set_df))
# --- Define variables for estimation
specs <- list()
# - Sample and lags
specs$lags_lin       <- 12                        # Set the number of lags for the linear model
specs$lags_criterion <- 'AIC'                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 12                     # Set the horizon length for irfs
################################################################################
data("interest_rules_var_data.RData")
data_set_df <-interest_rules_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
plots_lin <- lpirfs::plot_lin_irfs(results_lin)
plots_lin[[1]]
specs <- list()
# - Sample and lags
specs$lags_lin       <- 4                        # Set the number of lags for the linear model
specs$lags_criterion <- 'AIC'                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 12                     # Set the horizon length for irfs
################################################################################
data("interest_rules_var_data.RData")
data_set_df <-interest_rules_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
plots_lin <- lpirfs::plot_lin_irfs(results_lin)
lin_plots   <- sapply(plots_lin, ggplotGrob)
marrangeGrob(lin_plots, nrow = ncol(data_set_df), ncol = ncol(data_set_df))
# --- Define variables for estimation
specs <- list()
# - Sample and lags
specs$lags_lin       <- 4                        # Set the number of lags for the linear model
specs$lags_criterion <- NaN                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 12                     # Set the horizon length for irfs
################################################################################
data("interest_rules_var_data.RData")
data_set_df <-interest_rules_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
# Estimate coefficients and newey west std.err
# nw_results     <- lpirfs::newey_west_c(yy[, k], xx, h)
# b              <- nw_results[[1]]
# std_err        <- sqrt(diag(nw_results[[2]]))*specs$confint
#
# results_lm     <- lm(yy[, k] ~ xx)
# results_lm$coefficients
# std_err_sandwich  <- sqrt(diag(sandwich::NeweyWest(results_lm, lag = 1, prewhite = TRUE)))
plots_lin <- lpirfs::plot_lin_irfs(results_lin)
lin_plots   <- sapply(plots_lin, ggplotGrob)
marrangeGrob(lin_plots, nrow = ncol(data_set_df), ncol = ncol(data_set_df))
specs <- list()
# - Sample and lags
specs$lags_lin       <- 4                        # Set the number of lags for the linear model
specs$lags_criterion <- 'AIC'                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 12                     # Set the horizon length for irfs
################################################################################
data("interest_rules_var_data.RData")
data_set_df <-interest_rules_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
# Estimate coefficients and newey west std.err
# nw_results     <- lpirfs::newey_west_c(yy[, k], xx, h)
# b              <- nw_results[[1]]
# std_err        <- sqrt(diag(nw_results[[2]]))*specs$confint
#
# results_lm     <- lm(yy[, k] ~ xx)
# results_lm$coefficients
# std_err_sandwich  <- sqrt(diag(sandwich::NeweyWest(results_lm, lag = 1, prewhite = TRUE)))
plots_lin <- lpirfs::plot_lin_irfs(results_lin)
lin_plots   <- sapply(plots_lin, ggplotGrob)
marrangeGrob(lin_plots, nrow = ncol(data_set_df), ncol = ncol(data_set_df))
# --- Define variables for estimation
specs <- list()
# - Sample and lags
specs$lags_lin       <- 4                        # Set the number of lags for the linear model
specs$lags_criterion <- 'AIC'                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 2                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 24                     # Set the horizon length for irfs
################################################################################
data("interest_rules_var_data.RData")
data_set_df <-interest_rules_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
specs <- list()
# - Sample and lags
specs$lags_lin       <- 4                        # Set the number of lags for the linear model
specs$lags_criterion <- 'AIC'                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 12                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 24                     # Set the horizon length for irfs
################################################################################
data("interest_rules_var_data.RData")
data_set_df <-interest_rules_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
plots_lin <- lpirfs::plot_lin_irfs(results_lin)
lin_plots   <- sapply(plots_lin, ggplotGrob)
marrangeGrob(lin_plots, nrow = ncol(data_set_df), ncol = ncol(data_set_df))
?lp_lin
# --- Define variables for estimation
specs <- list()
# - Sample and lags
specs$lags_lin       <- 4                        # Set the number of lags for the linear model
specs$lags_criterion <- 'AIC'                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 12                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 24                     # Set the horizon length for irfs
################################################################################
data("interest_rules_var_data.RData")
data_set_df <- monetary_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
specs <- list()
# - Sample and lags
specs$lags_lin       <- 4                        # Set the number of lags for the linear model
specs$lags_criterion <- NaN                    # NaN = Manual Choice, 1 = AICc, 2 = AIC, 2 = BIC
specs$max_lags       <- 12                        # Set the lag of the non linear model
specs$trend          <- 0                       # 1 = no trend, 2 = trend, 3 = trend and quadratic trend
specs$shock_type     <- 1                        # Type of shock: 1 = standard dev. shock, 2 = unit shock.
specs$confint        <- 1.96                     # Set the width of confidence bands.
# 68% = 1, 90% = 1.65, 95% = 1.96
specs$hor            <- 24                     # Set the horizon length for irfs
################################################################################
data("interest_rules_var_data.RData")
data_set_df <- monetary_var_data
start <- Sys.time()
results_lin <- lpirfs::lp_lin(data_set_df, specs)
Sys.time() - start
plots_lin <- lpirfs::plot_lin_irfs(results_lin)
lin_plots   <- sapply(plots_lin, ggplotGrob)
marrangeGrob(lin_plots, nrow = ncol(data_set_df), ncol = ncol(data_set_df))
library(lpirfs)
?lp_lin
library(lpirfs)
library(lpirfs)
?lp_lin
library(tuber)
library(dplyr)
library(rvest)
library(stringr)
library(xlsx)
library(tidyr)
library(lubridate)
library(testit)
# --- Authentication
yt_oauth("124664722782-1h730qtq97aqnn358aq3qp2cgco53oca.apps.googleusercontent.com",
"qn-4vAtXCuj9z2pxnm34bmNU", token = '')
# Channel ID for 030-Tango
channel_id       <-  "UCtdgMR0bmogczrZNpPaO66Q"
# Get all video statistics
all_video_stats  <- get_all_channel_video_stats(channel_id = channel_id)
# Convert to correct format
stats_all        <- all_video_stats                                %>%
mutate(extract_date = Sys.Date())           %>%
mutate_at(funs(as.character(.)),
.vars = vars(id, title, url) )    %>%
mutate_at(funs(as.Date(.)),
.vars = vars(publication_date) )  %>%
mutate_at(funs(as.integer(.)),
.vars = vars(viewCount, likeCount, dislikeCount, favoriteCount, commentCount)) %>%
arrange(publication_date) %>%
as_tibble()
# Rename certain columns for later analyses
names(stats_all)[4:8] <- c('views', 'likes', 'dislikes', 'favorites', 'comments_nr')
# Save urls to extract comments from videos
url_videos            <- as_tibble(stats_all$id)
# Define list to store comments
comments_text        <- list()
# Function to extract comments which is used in the loop
get_comments_function <- function(m){
get_all_comments(video_id = url_videos$value[1])
}
# Loop to extract comments of videos
for (ii in seq_along(stats_all$id)) {
if (has_error(get_all_comments(video_id = url_videos$value[ii])) == TRUE) {
comments_text[[ii]]   <- list(NaN)
} else {
comment                   <- get_all_comments(video_id = url_videos$value[ii])
comments_text[[ii]]       <- list(comment$textDisplay)
}
if(ii %% 10==0) {
# Print on the screen some message
cat(paste0("iteration: ", ii, "\n"))
}
}
# Convert list with comments to tibble
comments_text     <- comments_text  %>%
as.matrix() %>%
as_tibble() %>%
rename(comments_text = V1)
# Add comments to main tibble
stats_all$comments_text <- comments_text
# Extract date to save tibble
save_date <- as.Date(Sys.Date())
# Name stats_tibble
tibble_name <- paste("stats", year(save_date), str_sub(save_date, 6,7), str_sub(save_date, 9, 10),  sep ="_")
# Assign current date to tibble
assign(tibble_name, stats_all)
# Set working directory to save tibble
save_path <- '/home/adaemmep/Dropbox/030_Scrape/Data/'
setwd(save_path)
# ID to save current date tibble
save_id <- paste(save_path, tibble_name, ".RData",  sep = "")
# Save tibble
save(list = tibble_name, file = save_id)
#  Load
View(stats_2018_05_01)
plot(stats_2018_05_01$views, type="l")
hist(stats_2018_05_01$views)
summary(stats_2018_05_01$views)
